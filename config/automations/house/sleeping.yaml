  # When sleeping, play a good night TTS message, turn off
  # all lighting, turn on stair nightlight lighting, turn off
  # smart sockets, pause media, and lock the front door.
  # If any door is open, don't activate.
  # If temperature meets a threshold, turn on the bedroom fan.
alias: Sleeping
initial_state: 'on'
trigger:
  - platform: state
    entity_id: switch.sleeping
    to: 'on'
#  - platform: mqtt
#    topic: milight/updates/0x2294/rgb_cct/+
condition:
  - condition: state
    entity_id: switch.guests
    state: 'off'
#  - condition: state
#    entity_id: binary_sensor.any_door_open
#    state: 'off'
action:
  - service: shell_command.tasker_message
    data:
      key: !secret tasker_key
      sender: !secret tasker_sender
      message: "Sleeping=:=Status=On,Guests=No"
#  - service: switch.turn_on
#    data:
#    entity_id: switch.freya
  - service: mqtt.publish
    data:
      topic: milight/0x2294/rgb_cct/1
      payload: "{'command':'night_mode'}"
  - service: light.turn_off
    data:
      entity_id: light.ambilight
  - service: light.turn_off
    data:
       entity_id: light.ambilight
#  - wait_template: "{{ not is_state('media_player.freya', 'off') }}"
#  - service: media_player.play_media
#    data:
#    entity_id: media_player.freya
#    media_content_type: audio/mp4
#    data_template:
#    media_content_id: >
#    {{ ["smb://freya/Music/Nature/Birds/Birds Singing.mp3", "smb://freya/Music/Nature/Birds/Forest and Nature.mp3", "smb://freya/Music/Nature/Birds/Forest Birds Singing.mp3" ] | random }}
  - service: switch.turn_off
    data:
      entity_id: switch.desktop_odin
  - delay: 0:10
  - service: light.turn_off
    data:
      entity_id: light.milight_spot
  - service: light.turn_off
    data:
      entity_id: light.milight_bank
  - service: light.turn_off
    entity_id: group.all_lights
